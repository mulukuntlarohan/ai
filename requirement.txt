using pl resolution 


import pygame
import random
from itertools import product
import time

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
GRID_CELL_SIZE = 100
FPS = 30
BUTTON_HEIGHT = 40
BUTTON_WIDTH = 150
GRID_SIZE = 4

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
BLUE = (0, 122, 255)
RED = (255, 0, 0)

# Load assets (Placeholders for images, replace them with actual images)
AGENT_IMG = pygame.image.load('assets/images/agent.png')
GOLD_IMG = pygame.image.load('assets/images/gold.png')
WUMPUS_IMG = pygame.image.load('assets/images/wumpus.png')
PIT_IMG = pygame.image.load('assets/images/pit.png')



class KnowledgeBase:
    def __init__(self):
        self.clauses = []

    def add_clause(self, clause):
        self.clauses.append(clause)

    def resolve(self, clause1, clause2):
        # Placeholder for PL-Resolution logic
        # In real implementation, this would resolve complementary literals
        resolved_clause = clause1 | clause2  # Dummy resolution
        return resolved_clause

    def infer(self):
        # Dummy inference using simple forward chaining
        new_facts = set()
        for clause in self.clauses:
            # Process each clause and try to infer new facts (simplified)
            if "B" in clause:  # If there's a breeze, infer pits in adjacent cells
                new_facts.add("Pit")
            if "S" in clause:  # If there's a stench, infer Wumpus in adjacent cells
                new_facts.add("Wumpus")
        return new_facts
class WumpusWorld:
    def __init__(self):
        self.grid_size = GRID_SIZE
        self.agent_position = (0, 0)
        self.gold_position = None
        self.wumpus_position = None
        self.pits = set()
        self.safe_positions = set([self.agent_position])
        self.knowledge_base = KnowledgeBase()
        self.percepts = {}
        self.game_over = False
        self.running = True
        self.mode = "setup"  # Modes: "setup", "play"
        self.selected_item = None  # Selected object to place
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption("Wumpus World with PL-Resolution")
        self.clock = pygame.time.Clock()
        self.initialize_world()

    def initialize_world(self):
        self.gold_position = None
        self.wumpus_position = None
        self.pits = set()
        self.safe_positions = set([self.agent_position])
        self.knowledge_base = KnowledgeBase()
        self.percepts = {}
        self.game_over = False

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                if self.mode == "setup":
                    self.handle_setup_click(x, y)
                elif self.mode == "play" and not self.game_over:
                    self.run_ai()
            elif event.type == pygame.KEYDOWN and self.mode == "play" and not self.game_over:
                if event.key == pygame.K_UP:
                    self.move_agent(0, -1)
                elif event.key == pygame.K_DOWN:
                    self.move_agent(0, 1)
                elif event.key == pygame.K_LEFT:
                    self.move_agent(-1, 0)
                elif event.key == pygame.K_RIGHT:
                    self.move_agent(1, 0)

    def handle_setup_click(self, x, y):
        if x < GRID_SIZE * GRID_CELL_SIZE and y < GRID_SIZE * GRID_CELL_SIZE:
            grid_x = x // GRID_CELL_SIZE
            grid_y = y // GRID_CELL_SIZE
            if self.selected_item == "gold":
                self.gold_position = (grid_x, grid_y)
            elif self.selected_item == "wumpus":
                self.wumpus_position = (grid_x, grid_y)
            elif self.selected_item == "pit":
                self.pits.add((grid_x, grid_y))
        elif SCREEN_WIDTH - BUTTON_WIDTH - 10 < x < SCREEN_WIDTH - 10:
            if 10 < y < 10 + BUTTON_HEIGHT:
                self.selected_item = "gold"
            elif 20 + BUTTON_HEIGHT < y < 20 + 2 * BUTTON_HEIGHT:
                self.selected_item = "wumpus"
            elif 30 + 2 * BUTTON_HEIGHT < y < 30 + 3 * BUTTON_HEIGHT:
                self.selected_item = "pit"
            elif 40 + 3 * BUTTON_HEIGHT < y < 40 + 4 * BUTTON_HEIGHT:
                self.mode = "play"
                self.generate_percepts()
            elif 50 + 4 * BUTTON_HEIGHT < y < 50 + 5 * BUTTON_HEIGHT:
                self.initialize_world()

    def move_agent(self, dx, dy):
        new_position = (self.agent_position[0] + dx, self.agent_position[1] + dy)
        if 0 <= new_position[0] < self.grid_size and 0 <= new_position[1] < self.grid_size:
            self.agent_position = new_position
            self.check_game_state()

    def run_ai(self):
        new_facts = self.knowledge_base.infer()
        print(f"Inferred facts: {new_facts}")
        while not self.game_over and self.agent_position != self.gold_position:
            next_move = self.infer_next_move(new_facts)
            if next_move:
                self.move_agent(*next_move)

    def infer_next_move(self, facts):
        # Simple heuristic for next move (replace with actual PL-based decision making)
        if self.agent_position == self.gold_position:
            print("Gold found!")
            self.game_over = True
            return None
        return (0, 1)  # Move right (Placeholder)

    def check_game_state(self):
        if self.agent_position == self.wumpus_position:
            print("Game Over! The agent encountered the Wumpus!")
            self.game_over = True
        elif self.agent_position in self.pits:
            print("Game Over! The agent fell into a pit!")
            self.game_over = True
        elif self.agent_position == self.gold_position:
            print("The agent found the gold!")
            self.game_over = True

    def generate_percepts(self):
        # Generate percepts based on environment (simplified)
        self.percepts["breeze"] = False
        self.percepts["stench"] = False
        if self.wumpus_position:
            self.percepts["stench"] = True
        if self.pits:
            self.percepts["breeze"] = True

    def draw(self):
        self.screen.fill(WHITE)

        # Draw grid
        for x, y in product(range(self.grid_size), repeat=2):
            pygame.draw.rect(self.screen, BLACK, (x * GRID_CELL_SIZE, y * GRID_CELL_SIZE, GRID_CELL_SIZE, GRID_CELL_SIZE), 1)

        # Draw objects
        if self.gold_position:
            self.screen.blit(GOLD_IMG, (self.gold_position[0] * GRID_CELL_SIZE, self.gold_position[1] * GRID_CELL_SIZE))
        if self.wumpus_position:
            self.screen.blit(WUMPUS_IMG, (self.wumpus_position[0] * GRID_CELL_SIZE, self.wumpus_position[1] * GRID_CELL_SIZE))
        for pit in self.pits:
            self.screen.blit(PIT_IMG, (pit[0] * GRID_CELL_SIZE, pit[1] * GRID_CELL_SIZE))

        # Draw agent
        self.screen.blit(AGENT_IMG, (self.agent_position[0] * GRID_CELL_SIZE, self.agent_position[1] * GRID_CELL_SIZE))

        pygame.display.flip()
        self.clock.tick(FPS)
def main():
    pygame.init()
    game = WumpusWorld()

    while game.running:
        game.handle_events()
        game.draw()

    pygame.quit()

if __name__ == "__main__":
    main()
